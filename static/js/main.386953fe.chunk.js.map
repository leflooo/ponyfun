{"version":3,"sources":["PonyDetails.js","PonyList.js","index.js"],"names":["PonyDetails","props","state","currentContact","nextProps","this","setState","e","target","name","value","preventDefault","newContact","deleteContact","addOrUpdateContact","className","id","onSubmit","htmlFor","type","Name","onChange","handleInputChange","ref","input","focus","Phone","Email","Adresse","href","onClick","React","Component","PonyList","emptyContact","contacts","getContacts","filter","c","a","fetch","config","Url","method","headers","then","response","json","Json","updatedContact","body","JSON","stringify","contact","length","map","selectContact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.386953fe.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass PonyDetails extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = props.currentContact;\r\n    }\r\n    \r\n    componentWillReceiveProps(nextProps) {\r\n      this.setState(nextProps.currentContact);\r\n    }\r\n    \r\n    handleInputChange(e) {\r\n      this.setState({\r\n        [e.target.name]: e.target.value\r\n      });\r\n    }\r\n    \r\n    newContact(e) {\r\n      e.preventDefault();\r\n      this.props.newContact();\r\n    }\r\n    \r\n    deleteContact(e) {\r\n      e.preventDefault();\r\n      this.props.deleteContact(this.props.currentContact);\r\n    }\r\n    \r\n    addOrUpdateContact(e) {\r\n      e.preventDefault();\r\n      this.props.addOrUpdateContact(this.state);\r\n    }\r\n    \r\n    render() {\r\n      return <div className=\"detail\">\r\n        <div>\r\n          <h3>{this.props.currentContact.id ? 'Kontakt Details' : 'Neuen Kontakt anlegen'}</h3>\r\n          \r\n        </div>\r\n\r\n        <form onSubmit={(e) => this.addOrUpdateContact(e)}>\r\n        \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"Name\">Name:</label>\r\n            <input \r\n              type=\"text\"\r\n              id=\"Name\"\r\n              name=\"Name\"\r\n              value={this.state.Name} \r\n              //disabled = {this.state.id}\r\n              onChange={(e) => this.handleInputChange(e)}\r\n              ref={input => input && input.value === \"\" && input.focus()}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"Phone\">Tel.Nr.:</label>\r\n            <input \r\n              type=\"text\"\r\n              id=\"Phone\"\r\n              name=\"Phone\"\r\n              value={this.state.Phone} \r\n              onChange={(e) => this.handleInputChange(e)} \r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"Email\">Email:</label>\r\n            <input \r\n              type=\"text\"\r\n              id=\"Email\"\r\n              name=\"Email\"\r\n              value={this.state.Email} \r\n              onChange={(e) => this.handleInputChange(e)} \r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"Adresse\">Adresse:</label>\r\n            <input \r\n              type=\"text\"\r\n              id=\"Adresse\"\r\n              name=\"Adresse\"\r\n              value={this.state.Adresse} \r\n              onChange={(e) => this.handleInputChange(e)} \r\n            />\r\n          </div>\r\n          <br/>\r\n          <div className=\"action\">\r\n            <input type=\"submit\" className=\"btn\" value={this.props.currentContact.id ? 'Ändern' : 'Speichern'} />\r\n            { this.props.currentContact.id &&\r\n              <button href=\"#\" \r\n                className=\"btn\" \r\n                onClick={(e) => this.deleteContact(e)}\r\n              >Löschen</button>\r\n            }\r\n          </div>\r\n          \r\n        </form>\r\n      </div>\r\n    }\r\n  }\r\n\r\n  export default PonyDetails;","import React from 'react';\nimport './App.scss';\nimport PonyDetails from './PonyDetails';\n\n\nclass PonyList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.emptyContact = {\n      id: '',\n      Name: '',\n      Email: '',\n      Phone: '',\n      Adresse: ''\n    };\n    this.state = {\n      contacts: [],\n      currentContact: this.emptyContact,\n    }\n  }\n\n  componentDidMount() {\n    this.getContacts();\n  }\n\n  selectContact(id) {\n    this.setState({\n      currentContact: this.state.contacts.filter(c => c.id === id)[0]\n    });\n  }\n\n  newContact() {\n    this.setState({\n      currentContact: this.emptyContact\n    });\n    \n  }\n  async getContacts() {    \n    let Json = await fetch(this.props.config.Url, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then(response => response.json());\n    this.setState({\n      currentContact: this.emptyContact,\n      contacts: Json,\n    });      \n  }\n\n  async addOrUpdateContact(updatedContact) {\n    let method;\n    if (updatedContact.id === '') {\n      method = 'POST';\n    } else {\n      method = 'PUT';\n    }\n    await fetch(this.props.config.Url + \"/\" + updatedContact.id, {\n      method: method,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updatedContact)\n    });\n    this.getContacts();\n  }\n\n  async deleteContact(contact) {\n    await fetch(this.props.config.Url + \"/\" + contact.id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(contact)\n    });\n    this.getContacts();\n  }\n\n  render() {\n    return <div>\n      <header>\n        <h1>Kontaktbuch!!!</h1>\n      </header>\n\n        <main>\n          <div className=\"list\">\n            {this.state.contacts.length ? '' : 'Keine Einträge gefunden.'}\n            <ul>\n              {this.state.contacts.map(contact =>\n                <li key={contact.id}>\n                  <a\n                    href=\"#\"\n                    onClick={() => this.selectContact(contact.id)}\n                    className={this.state.currentContact.id === contact.id ? 'selected' : ''}>\n                    <span>{contact.Name}</span>\n                  </a>\n                </li>\n              )}\n              <li>\n                <a href=\"#\"\n                  className=\"btn\"\n                  onClick={(e) => this.newContact(e)}\n                  ><b>+ Neuen Kontakt anlegen</b>\n                </a>\n              </li>\n            </ul>\n          </div>\n          <PonyDetails\n            currentContact={this.state.currentContact}\n            newContact={() => this.newContact()}\n            addOrUpdateContact={(contact) => this.addOrUpdateContact(contact)}\n            deleteContact={(contact) => this.deleteContact(contact)} />\n\n        </main>\n      </div>\n  }\n}\n\nexport default PonyList;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.scss';\nimport PonyList from './PonyList';\n\nconst conf = {\n    Url: 'http://localhost:3000/contacts'\n  };\n\nReactDOM.render(<PonyList config={conf} />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}